## src/preprocessing.py --->>>>>>



import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

def load_data(file_path):
    """Load dataset from CSV file"""
    return pd.read_csv(file_path)

def explore_data(df):
    """Explore dataset and return summary statistics"""
    exploration = {
        'shape': df.shape,
        'first_5_rows': df.head(),
        'info': df.info(),
        'missing_values': df.isnull().sum(),
        'statistical_summary': df.describe()
    }
    return exploration

def preprocess_data(df, target_column):
    """
    Preprocess healthcare dataset: handle missing values, 
    encode categorical features, scale data
    """

    df_processed = df.copy()
    
 
    numerical_cols = df_processed.select_dtypes(include=[np.number]).columns
    df_processed[numerical_cols] = df_processed[numerical_cols].fillna(df_processed[numerical_cols].median())
   
    categorical_cols = df_processed.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        df_processed[col] = df_processed[col].fillna(df_processed[col].mode()[0] if not df_processed[col].mode().empty else 'Unknown')
    

    X = df_processed.drop(columns=[target_column])
    y = df_processed[target_column]
    
    
    categorical_cols = X.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col])
    
    if y.dtype == 'object':
        le = LabelEncoder()
        y = le.fit_transform(y)
    
  
    numerical_cols = X.select_dtypes(include=[np.number]).columns
    scaler = StandardScaler()
    X[numerical_cols] = scaler.fit_transform(X[numerical_cols])
    

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    return X_train, X_test, y_train, y_test, scaler



###src/models.py--->>>>

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV

class DiseasePredictionModels:
    def __init__(self):
        self.models = {
            'Logistic Regression': LogisticRegression(random_state=42),
            'Decision Tree': DecisionTreeClassifier(random_state=42),
            'Random Forest': RandomForestClassifier(random_state=42, n_estimators=100),
            'Gradient Boosting': GradientBoostingClassifier(random_state=42),
            'SVM': SVC(probability=True, random_state=42)
        }
        self.results = {}
        self.trained_models = {}

    def train_models(self, X_train, y_train):
        """Train all models"""
        for name, model in self.models.items():
            model.fit(X_train, y_train)
            self.trained_models[name] = model
            print(f"{name} trained successfully")

    def evaluate_models(self, X_test, y_test):
        """Evaluate all models and store results"""
        evaluation_results = []

        for name, model in self.trained_models.items():
            y_pred = model.predict(X_test)
            y_prob = model.predict_proba(X_test)[:, 1] if hasattr(model, "predict_proba") else None

            metrics = {
                'Model': name,
                'Accuracy': accuracy_score(y_test, y_pred),
                'Precision': precision_score(y_test, y_pred),
                'Recall': recall_score(y_test, y_pred),
                'F1-Score': f1_score(y_test, y_pred),
                'ROC-AUC': roc_auc_score(y_test, y_prob) if y_prob is not None else None
            }
            evaluation_results.append(metrics)

           
            self.results[name] = {'y_true': y_test, 'y_pred': y_pred, 'y_prob': y_prob}

        return pd.DataFrame(evaluation_results)
    
    def get_model(self, model_name):
        """Get a specific trained model"""
        return self.trained_models.get(model_name)
    
    def optimize_random_forest(self, X_train, y_train):
        """Optimize Random Forest using GridSearch"""
        param_grid = {
            'n_estimators': [50, 100, 200],
            'max_depth': [None, 10, 20, 30],
            'min_samples_split': [2, 5, 10],
            'min_samples_leaf': [1, 2, 4]
        }

        rf = RandomForestClassifier(random_state=42)
        grid_search = GridSearchCV(rf, param_grid, cv=5, scoring='f1', n_jobs=-1)
        grid_search.fit(X_train, y_train)

        print("Best parameters:", grid_search.best_params_)
        print("Best cross-validation score:", grid_search.best_score_)

     
        self.trained_models['Optimized Random Forest'] = grid_search.best_estimator_
        
        return grid_search.best_estimator_


##src/evaluation.py--->>>>

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, roc_curve
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def evaluate_model(y_true, y_pred, y_prob=None):
    """Evaluate a single model and return metrics"""
    metrics = {
        'Accuracy': accuracy_score(y_true, y_pred),
        'Precision': precision_score(y_true, y_pred),
        'Recall': recall_score(y_true, y_pred),
        'F1-Score': f1_score(y_true, y_pred)
    }
    
    if y_prob is not None:
        metrics['ROC-AUC'] = roc_auc_score(y_true, y_prob)
    
    return metrics

def create_visualizations(results_dict, model_names, feature_names=None, model=None):
    """Create comprehensive visualizations for model evaluation"""
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    
    
    cm = confusion_matrix(results_dict[model_names[0]]['y_true'], 
                         results_dict[model_names[0]]['y_pred'])
    sns.heatmap(cm, annot=True, fmt='d', ax=axes[0,0], cmap='Blues')
    axes[0,0].set_title(f'Confusion Matrix - {model_names[0]}')
    axes[0,0].set_xlabel('Predicted')
    axes[0,0].set_ylabel('Actual')

    
    for model_name in model_names:
        if results_dict[model_name]['y_prob'] is not None:
            fpr, tpr, _ = roc_curve(results_dict[model_name]['y_true'], 
                                   results_dict[model_name]['y_prob'])
            auc_score = roc_auc_score(results_dict[model_name]["y_true"], 
                                     results_dict[model_name]["y_prob"])
            axes[0,1].plot(fpr, tpr, label=f'{model_name} (AUC = {auc_score:.2f})')
    
    axes[0,1].plot([0, 1], [0, 1], 'k--')
    axes[0,1].set_xlabel('False Positive Rate')
    axes[0,1].set_ylabel('True Positive Rate')
    axes[0,1].set_title('ROC Curve')
    axes[0,1].legend()

  
    metrics_data = []
    for name, results in results_dict.items():
        metrics_data.append({
            'Model': name,
            'Accuracy': accuracy_score(results['y_true'], results['y_pred']),
            'Precision': precision_score(results['y_true'], results['y_pred']),
            'Recall': recall_score(results['y_true'], results['y_pred']),
            'F1-Score': f1_score(results['y_true'], results['y_pred'])
        })
    
    metrics_df = pd.DataFrame(metrics_data)
    metrics_df.set_index('Model').plot(kind='bar', ax=axes[1,0])
    axes[1,0].set_title('Model Metrics Comparison')
    axes[1,0].tick_params(axis='x', rotation=45)
    axes[1,0].legend(loc='upper right')

 
    if feature_names is not None and model is not None and hasattr(model, 'feature_importances_'):
        feature_importance = model.feature_importances_
        importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': feature_importance})
        importance_df = importance_df.sort_values('Importance', ascending=False).head(10)

        axes[1,1].barh(importance_df['Feature'], importance_df['Importance'])
        axes[1,1].set_title('Top 10 Feature Importance')
        axes[1,1].set_xlabel('Importance')
    else:
        axes[1,1].set_visible(False)

    plt.tight_layout()
    return fig

##src/visualization.py--->>>>>

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.metrics import confusion_matrix, roc_curve, roc_auc_score

def plot_correlation_matrix(df, figsize=(10, 8)):
    """Plot correlation matrix for numerical features"""
    numerical_df = df.select_dtypes(include=[np.number])
    plt.figure(figsize=figsize)
    corr = numerical_df.corr()
    sns.heatmap(corr, annot=True, fmt=".2f", cmap='coolwarm', 
                square=True, linewidths=0.5)
    plt.title('Feature Correlation Matrix')
    return plt.gcf()

def plot_distributions(df, target_column, figsize=(15, 10)):
    """Plot distributions of features by target class"""
    numerical_cols = df.select_dtypes(include=[np.number]).columns
    n_cols = 3
    n_rows = (len(numerical_cols) - 1) // n_cols + 1
    
    fig, axes = plt.subplots(n_rows, n_cols, figsize=figsize)
    axes = axes.flatten()
    
    for i, col in enumerate(numerical_cols):
        if col != target_column:
            for target_value in df[target_column].unique():
                subset = df[df[target_column] == target_value]
                sns.histplot(subset[col], kde=True, ax=axes[i], 
                            label=f'Class {target_value}', alpha=0.6)
            axes[i].set_title(f'Distribution of {col}')
            axes[i].legend()
    
 
    for j in range(i + 1, len(axes)):
        axes[j].set_visible(False)
    
    plt.tight_layout()
    return fig
