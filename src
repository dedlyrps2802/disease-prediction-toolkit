## src/preprocessing.py
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

def load_data(file_path):
    """Load dataset from CSV file"""
    return pd.read_csv(file_path)

def explore_data(df):
    """Explore dataset and return summary statistics"""
    exploration = {
        'shape': df.shape,
        'first_5_rows': df.head(),
        'info': df.info(),
        'missing_values': df.isnull().sum(),
        'statistical_summary': df.describe()
    }
    return exploration

def preprocess_data(df, target_column):
    """
    Preprocess healthcare dataset: handle missing values, 
    encode categorical features, scale data
    """

    df_processed = df.copy()
    
 
    numerical_cols = df_processed.select_dtypes(include=[np.number]).columns
    df_processed[numerical_cols] = df_processed[numerical_cols].fillna(df_processed[numerical_cols].median())
   
    categorical_cols = df_processed.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        df_processed[col] = df_processed[col].fillna(df_processed[col].mode()[0] if not df_processed[col].mode().empty else 'Unknown')
    

    X = df_processed.drop(columns=[target_column])
    y = df_processed[target_column]
    
    
    categorical_cols = X.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col])
    
    if y.dtype == 'object':
        le = LabelEncoder()
        y = le.fit_transform(y)
    
  
    numerical_cols = X.select_dtypes(include=[np.number]).columns
    scaler = StandardScaler()
    X[numerical_cols] = scaler.fit_transform(X[numerical_cols])
    

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    return X_train, X_test, y_train, y_test, scaler
